/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * TiDev Titanium Mobile
 * Copyright TiDev, Inc. 04/07/2022-Present
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package com.inzori.salesforcechat;

import org.appcelerator.kroll.KrollModule;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.kroll.KrollDict;

import org.appcelerator.titanium.TiApplication;
import org.appcelerator.kroll.common.Log;
import org.appcelerator.titanium.util.TiConvert;

import com.salesforce.android.service.common.utilities.control.Async;

import com.salesforce.android.chat.core.ChatConfiguration;
import com.salesforce.android.chat.core.SessionStateListener;
import com.salesforce.android.chat.core.SessionInfoListener;

import com.salesforce.android.chat.core.model.ChatSessionState;
import com.salesforce.android.chat.core.model.ChatEndReason;
import com.salesforce.android.chat.core.model.AgentInformation;
import com.salesforce.android.chat.core.model.ChatWindowMenu;
import com.salesforce.android.chat.core.model.ChatWindowMenu.MenuItem;
import com.salesforce.android.chat.core.model.ChatWindowButtonMenu.Button;
import com.salesforce.android.chat.core.model.ChatWindowButtonMenu;
import com.salesforce.android.chat.core.model.ChatWindowButtonMenu.Button;
import com.salesforce.android.chat.core.model.ChatMessage;
import com.salesforce.android.chat.core.model.ChatFooterMenu;
import com.salesforce.android.chat.core.model.ChatSessionInfo;
import com.salesforce.android.chat.core.model.ChatEntity;
import com.salesforce.android.chat.core.model.ChatEntityField;
import com.salesforce.android.chat.core.model.ChatUserData;

import com.salesforce.android.chat.ui.ChatUIConfiguration;
import com.salesforce.android.chat.ui.ChatUI;
import com.salesforce.android.chat.ui.ChatUIClient;
import com.salesforce.android.chat.ui.ChatEventListener;



@Kroll.module(name="SalesforceChat", id="com.inzori.salesforcechat")
public class SalesforceChatModule extends KrollModule
{
	// Standard Debugging variables
	private static final String LCAT = "SalesforceChatModule";
	private static ChatUIClient globalChatUIClient;
	public SalesforceChatModule()
	{
		super();
	}

	@Kroll.onAppCreate
	public static void onAppCreate(TiApplication app)
	{
		Log.w(LCAT, "inside onAppCreate");

	}

	@Kroll.method
	public void launchChat(KrollDict args) {
		
		String ORG_ID = "";
		String DEPLOYMENT_ID = "";
		String BUTTON_ID = "";
		String LIVE_AGENT_POD = ""; 

		String firstName = "";
		String lastName = "";
		String email = "";
		String subject = "";
		String phone = "";
		String origin = "";

		boolean defaultToMinimized = true;
		boolean allowMinimization = true;
		boolean allowURLPreview = true;
		boolean showPrechatFields = false;
		boolean createSalesforceCase = false;

		// Ti events "salesforce_chat:session_error", "salesforce_chat:session_end", "salesforce_chat:session_state""
		try {
			if(args.containsKey("orgId")){
				ORG_ID = args.getString("orgId");
			} else return;
			if (args.containsKey("deploymentId")) {
				DEPLOYMENT_ID = args.getString("deploymentId");
			} else return;
			if(args.containsKey("buttonId")){
				BUTTON_ID = args.getString("buttonId");
			} else return;
			if(args.containsKey("podName")){
				LIVE_AGENT_POD = args.getString("podName");
			}	else return;

			if(args.containsKey("firstName")){
				firstName = args.getString("firstName");
			}
			if (args.containsKey("lastName")) {
				lastName = args.getString("lastName");
			}
			if(args.containsKey("email")){
				email = args.getString("email");
			}
			if(args.containsKey("phone")){
				phone = args.getString("phone");
			}
			if(args.containsKey("subject")){
				subject = args.getString("subject");
			}
			if(args.containsKey("caseOrigin")){
				origin = args.getString("caseOrigin");
			}			

			if(args.containsKey("defaultToMinimized")){
				defaultToMinimized = TiConvert.toBoolean(args.getString("defaultToMinimized"));
			}
			if (args.containsKey("allowMinimization")) {
				allowMinimization = TiConvert.toBoolean(args.getString("allowMinimization"));
			}
			if(args.containsKey("allowURLPreview")){
				allowURLPreview = TiConvert.toBoolean(args.getString("allowURLPreview"));
			}
			if(args.containsKey("showPrechatFields")){
				showPrechatFields = TiConvert.toBoolean(args.getString("showPrechatFields"));
			}
			if(args.containsKey("createSalesforceCase")){
				createSalesforceCase = TiConvert.toBoolean(args.getString("createSalesforceCase"));
			}

			// Create some hidden fields with specific values
			ChatUserData firstNameData = new ChatUserData(
			"FirstName", firstName, true);
			ChatUserData lastNameData = new ChatUserData(
			"LastName", lastName, true);
			ChatUserData emailData = new ChatUserData(
			"Email", email, true);
			ChatUserData subjectData = new ChatUserData(
			"Subject", subject, true);
			ChatUserData phoneData = new ChatUserData(
			"Phone", phone, true);
			ChatUserData originData = new ChatUserData(
			"Origin", origin, true);

			// Map Subject to a field in a Case record
			ChatEntity caseEntity = new ChatEntity.Builder()
			.showOnCreate(true)
			.linkToTranscriptField("Case")
			.addChatEntityField(
				new ChatEntityField.Builder()
					.doCreate(true)
					.build("Subject", subjectData))
			.addChatEntityField(
				new ChatEntityField.Builder()
					.doCreate(true)
					.build("Origin", originData))					
			.build("Case");
		

			// Map FirstName, LastName, and Email to fields in a Contact record
			ChatEntity contactEntity = new ChatEntity.Builder()
			.showOnCreate(true)
			.linkToTranscriptField("Contact")
			.linkToAnotherSalesforceObject(caseEntity, "ContactId")
			.addChatEntityField(
			new ChatEntityField.Builder()
					.doFind(true)
					.isExactMatch(true)
					.doCreate(true)
					.build("FirstName", firstNameData))
			.addChatEntityField(
			new ChatEntityField.Builder()
					.doFind(true)
					.isExactMatch(true)
					.doCreate(true)
					.build("LastName", lastNameData))
			.addChatEntityField(
			new ChatEntityField.Builder()
					.doFind(true)
					.isExactMatch(true)
					.doCreate(true)
					.build("Email", emailData))
			.addChatEntityField(
				new ChatEntityField.Builder()
						.doFind(false)
						.isExactMatch(false)
						.doCreate(false)
						.build("Phone", phoneData))					
			.build("Contact");

			// Create the chat configuration builder
			final ChatConfiguration.Builder chatConfigurationBuilder = new ChatConfiguration.Builder(
				ORG_ID, 
				BUTTON_ID, 
				DEPLOYMENT_ID, 
				LIVE_AGENT_POD
			);

			// Add user data and entities
			if (createSalesforceCase) {
				chatConfigurationBuilder
				.chatUserData(firstNameData, lastNameData, emailData, phoneData, subjectData, originData)
				.chatEntities(caseEntity, contactEntity);			
			} else {
				chatConfigurationBuilder
				.chatUserData(firstNameData, lastNameData, emailData, phoneData, subjectData)
				.chatEntities(contactEntity);					
			}			

			// Build the chat configuration object
			ChatConfiguration chatConfiguration = chatConfigurationBuilder.build();

			ChatUIConfiguration.Builder uiConfig = new ChatUIConfiguration.Builder()
				.disablePreChatView(!showPrechatFields)
				.defaultToMinimized(defaultToMinimized)
				.chatConfiguration(chatConfiguration)
				.enableHyperlinkPreview(allowURLPreview)
				.chatEventListener(new MyEventListener());
				

			ChatUI.configure(uiConfig.build())
				.createClient(TiApplication.getInstance().getApplicationContext())
				.onResult(new Async.ResultHandler<ChatUIClient>() {
					@Override public void handleResult (Async<?> operation, 
					ChatUIClient chatUIClient) {

						SessionStateListener sessionStateListener = new MySessionStateListener();
						chatUIClient.addSessionStateListener(sessionStateListener);
		
						SessionInfoListener sessionInfoListener = new MySessionInfoListener();
						chatUIClient.addSessionInfoListener(sessionInfoListener);
		
						chatUIClient.startChatSession(TiApplication.getAppCurrentActivity());

						globalChatUIClient = chatUIClient;
					}
			});		
			
		}  catch (Exception e) {
			Log.e(LCAT, "error" , e);
		}
	}

	@Kroll.method
	public void dismissChat() {
		if (globalChatUIClient != null) {
			globalChatUIClient.endChatSession();
		}
	}
	@Kroll.method
	public void minimize() {
		if (globalChatUIClient != null) {
			globalChatUIClient.minimize();
		}		
	}
	@Kroll.method
	public void maximize() {
		if (globalChatUIClient != null) {
			globalChatUIClient.maximize();
		}		
	}

	public class MySessionStateListener implements SessionStateListener{
		private static final String LCAT = "SalesforceChatModule - MySessionStateListener";
	  
		@Override public void onSessionStateChange (ChatSessionState state) {
		  String stateName = "UNKNOWN";
		  //Log.w(LCAT, "session state: " + state.toString());
	  
		  if (state == ChatSessionState.Ready) {
			// TODO: Handle the disconnected state change
			stateName = "READY";
		  }
		  if (state == ChatSessionState.Verification) {
			// TODO: Handle the disconnected state change
			stateName = "VERIFICATION";
		  }    
		  if (state == ChatSessionState.Initializing) {
			// TODO: Handle the disconnected state change
			stateName = "INITIALIZING";
		  }    
		  if (state == ChatSessionState.Connecting) {
			// TODO: Handle the disconnected state change
			stateName = "CONNECTING";
		  }    
		  if (state == ChatSessionState.InQueue) {
			// TODO: Handle the disconnected state change
			stateName = "INQUEUE";
		  }    
		  if (state == ChatSessionState.Connected) {
			// TODO: Handle the disconnected state change
			stateName = "CONNECTED";
		  }    
		  if (state == ChatSessionState.Ending) {
			// TODO: Handle the disconnected state change
			stateName = "ENDING";
		  }    
		  if (state == ChatSessionState.Disconnected) {
			// TODO: Handle the disconnected state change
			stateName = "DISCONNECTED";
		  } 
	  
		  KrollDict eventData = new KrollDict();
		  eventData.put("state",stateName);
		  fireEvent("salesforce_chat:session_state", eventData);
		}
	  
		@Override public void onSessionEnded (ChatEndReason endReason) {
		  //Log.w(LCAT, "session end reason: " + endReason.toString());
		  String reasonName = "UNKNOWN";
	  
		  if (endReason == ChatEndReason.EndedByAgent) {
			reasonName = "AGENT";
		  }
		  if (endReason == ChatEndReason.EndedByClient) {
			reasonName = "USER";
		  }
		  if (endReason == ChatEndReason.LiveAgentTimeout) {
			reasonName = "TIMEOUT";
		  }
		  if (endReason == ChatEndReason.NetworkError) {
			reasonName = "ERROR";
		  }
		  if (endReason == ChatEndReason.NoAgentsAvailable) {
			reasonName = "NOAGENTSAVAILABLE";
		  }  
		  if (endReason == ChatEndReason.VerificationError) {
			reasonName = "ERROR";
		  }               
		  KrollDict eventData = new KrollDict();
		  eventData.put("reason",reasonName);
		  fireEvent("salesforce_chat:session_end", eventData);
		}
	  
	}	

	public class MyEventListener implements ChatEventListener {
		private static final String LCAT = "SalesforceChatModule - MyEventListener";
		private static final String eventName = "salesforce_chat:session_event";
	
		public void agentJoined (AgentInformation agentInformation) {
			// Handle agent joined
			//Log.w(LCAT, "agent: " + agentInformation.getAgentName() + " isBot: " + agentInformation.isChatBot());
			KrollDict eventData = new KrollDict();
			eventData.put("name", "AGENTJOINED");   
			eventData.put("data", agentInformation);
			fireEvent(eventName, eventData);         
		}
	
		public void processedOutgoingMessage (String message) {
			// Handle outgoing message processed
			//Log.w(LCAT, "out message: " + message);
			KrollDict eventData = new KrollDict();
			eventData.put("name", "PROCESSEDOUTGOINGMESSAGE");   
			eventData.put("data", message);   
			fireEvent(eventName, eventData);         
		}
	
		public void didSelectMenuItem (ChatWindowMenu.MenuItem menuItem) {
			// Handle chatbot menu selected
			KrollDict eventData = new KrollDict();
			eventData.put("name", "ITEMSELECTED");    
			fireEvent(eventName, eventData);    
		}
	
		public void didSelectButtonItem (ChatWindowButtonMenu.Button buttonItem) {
			// Handle chatbot button selected
			KrollDict eventData = new KrollDict();
			eventData.put("name", "BUTTONSELECTED");    
			fireEvent(eventName, eventData);  
		}
	
		public void didSelectFooterMenuItem (ChatFooterMenu.MenuItem footerMenuItem) {
			// Handle chatboot footer menu selected
			KrollDict eventData = new KrollDict();
			eventData.put("name", "FOOTERITEMSELECTED");    
			fireEvent(eventName, eventData);  
		}
	
		public void didReceiveMessage (ChatMessage chatMessage) {
			//Log.w(LCAT, "in message: " + chatMessage.toString());
			// Handle received message
			KrollDict eventData = new KrollDict();
			eventData.put("name", "MESSAGERECEIVED");    
			fireEvent(eventName, eventData);          
		}
	
		public void transferToButtonInitiated () {
			// Handle transfer to agent
			KrollDict eventData = new KrollDict();
			eventData.put("name", "TRANSFERTOBUTTONINITIATED");    
			fireEvent(eventName, eventData);  
		}
	
		public void agentIsTyping (boolean isUserTyping) {
			//Log.w(LCAT, "agent typing is user: " + isUserTyping);
			// Handle typing update
			KrollDict eventData = new KrollDict();
			eventData.put("name", "AGENTISTYPING");    
			fireEvent(eventName, eventData);  
		}    
	}	

	public class MySessionInfoListener implements SessionInfoListener {
		private static final String LCAT = "SalesforceChatModule - MySessionInfoListener";
	
		public void onSessionInfoReceived (ChatSessionInfo chatSessionInfo) {
			//Log.w(LCAT, "session info: " + chatSessionInfo.toString());
			// TO DO: Do something with the session ID
			String sessionId = chatSessionInfo.getSessionId();
			KrollDict eventData = new KrollDict();
			eventData.put("sessionId",sessionId);   
			fireEvent("salesforce_chat:session_info", eventData);         
		}
	   
	}	
}
